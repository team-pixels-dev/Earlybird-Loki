name: CD Pipeline
on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  LOKI_ECR_REPOSITORY: ${{ vars.LOKI_ECR_REPOSITORY }}
  NGINX_ECR_REPOSITORY: ${{ vars.NGINX_ECR_REPOSITORY }}
  ECS_SERVICE: ${{ vars.ECS_SERVICE }}
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
  ECS_TASK_DEFINITION_ARN: ${{ secrets.ECS_TASK_DEFINITION_ARN }}
  LOKI_CONTAINER_NAME: ${{ vars.LOKI_CONTAINER_NAME }}
  NGINX_CONTAINER_NAME: ${{ vars.NGINX_CONTAINER_NAME }}
  AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  NGINX_HTPASSWD: ${{ secrets.NGINX_HTPASSWD }}

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create .htpasswd
        run: |
          echo "${{ env.NGIX_PTPASSWD }}" > ./.htpasswd

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Loki image to Amazon ECR
        id: build-loki-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$LOKI_ECR_REPOSITORY:$IMAGE_TAG -f ./Dockerfile_Loki .
          docker push $ECR_REGISTRY/$LOKI_ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$LOKI_ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build, tag, and push Nginx image to Amazon ECR
        id: build-nginx-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$NGINX_ECR_REPOSITORY:$IMAGE_TAG -f ./Dockerfile_Nginx .
          docker push $ECR_REGISTRY/$NGINX_ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$NGINX_ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new Loki image ID in the Amazon ECS task definition
        id: task-def-loki
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition-arn: ${{ env.ECS_TASK_DEFINITION_ARN }}
          container-name: ${{ env.LOKI_CONTAINER_NAME }}
          image: ${{ steps.build-loki-image.outputs.image }}

      - name: Fill in the new Nginx image ID in the Amazon ECS task definition
        id: task-def-nginx
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition-arn: ${{ env.ECS_TASK_DEFINITION_ARN }}
          container-name: ${{ env.NGINX_CONTAINER_NAME }}
          image: ${{ steps.build-nginx-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def-nginx.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
